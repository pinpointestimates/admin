{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\dev\\\\pinpoint\\\\admin\\\\src\\\\components\\\\ApolloWrapper.js\";\nimport { ApolloClient, InMemoryCache, ApolloProvider, HttpLink, ApolloLink, gql } from '@apollo/client';\nimport { onError } from '@apollo/client/link/error';\nimport { themeQuery } from '../schemas/theme';\n\nconst ApolloWrapper = ({\n  children\n}) => {\n  const httpLink = new HttpLink({\n    uri: process.env.REACT_APP_GRAPHQL_SERVICE\n  });\n  const authLink = new ApolloLink((operation, forward) => {\n    // Retrive and set the token from localstorage\n    const token = localStorage.getItem('token');\n    const xtoken = localStorage.getItem('xtoken');\n\n    if (!!token) {\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n          'x-session-token': xtoken ? xtoken : '' //Used in the signup\n\n        }\n      });\n    } // Call the next link in the middleware chain.\n\n\n    return forward(operation);\n  });\n  const logoutLink = onError(({\n    graphQLErrors\n  }) => {\n    if (graphQLErrors) {\n      graphQLErrors.forEach(e => {\n        if (!!e.extensions && !!e.extensions.code && e.extensions.code === 'UNAUTHENTICATED') {\n          localStorage.removeItem('token'); //TODO handle this, cause if this occurs it will make the client spin for ever\n\n          window.location.reload();\n        }\n      });\n    }\n  });\n  const cache = new InMemoryCache();\n  const client = new ApolloClient({\n    link: logoutLink.concat(authLink).concat(httpLink),\n    // Chain it with the HttpLink\n    cache\n  }); // const initialState = {\n  //   theme: {\n  //     light: false,\n  //   },\n  // };\n  // cache.writeData({ data: initialState });\n  // Query that fetches all existing to-do items\n\n  const query = gql`\n    query Theme {\n      theme {\n        light\n      }\n    }\n  `; // Get the current to-do list\n\n  const data = client.readQuery({\n    query\n  }); // Create a new to-do item\n\n  const initTheme = {\n    light: false,\n    __typename: 'Theme'\n  }; // Write back to the to-do list, appending the new item\n\n  client.writeQuery({\n    query,\n    data: {\n      theme: initTheme\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(ApolloProvider, {\n    client: client,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 10\n  }, this);\n};\n\n_c = ApolloWrapper;\nexport default ApolloWrapper;\n\nvar _c;\n\n$RefreshReg$(_c, \"ApolloWrapper\");","map":{"version":3,"sources":["C:/dev/pinpoint/admin/src/components/ApolloWrapper.js"],"names":["ApolloClient","InMemoryCache","ApolloProvider","HttpLink","ApolloLink","gql","onError","themeQuery","ApolloWrapper","children","httpLink","uri","process","env","REACT_APP_GRAPHQL_SERVICE","authLink","operation","forward","token","localStorage","getItem","xtoken","setContext","headers","authorization","logoutLink","graphQLErrors","forEach","e","extensions","code","removeItem","window","location","reload","cache","client","link","concat","query","data","readQuery","initTheme","light","__typename","writeQuery","theme"],"mappings":";;AAAA,SACEA,YADF,EAEEC,aAFF,EAGEC,cAHF,EAIEC,QAJF,EAKEC,UALF,EAMEC,GANF,QAOO,gBAPP;AAQA,SAASC,OAAT,QAAwB,2BAAxB;AACA,SAASC,UAAT,QAA2B,kBAA3B;;AAEA,MAAMC,aAAa,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AACtC,QAAMC,QAAQ,GAAG,IAAIP,QAAJ,CAAa;AAC5BQ,IAAAA,GAAG,EAAEC,OAAO,CAACC,GAAR,CAAYC;AADW,GAAb,CAAjB;AAIA,QAAMC,QAAQ,GAAG,IAAIX,UAAJ,CAAe,CAACY,SAAD,EAAYC,OAAZ,KAAwB;AACtD;AACA,UAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd;AACA,UAAMC,MAAM,GAAGF,YAAY,CAACC,OAAb,CAAqB,QAArB,CAAf;;AAEA,QAAI,CAAC,CAACF,KAAN,EAAa;AACXF,MAAAA,SAAS,CAACM,UAAV,CAAqB;AACnBC,QAAAA,OAAO,EAAE;AACPC,UAAAA,aAAa,EAAEN,KAAK,GAAI,UAASA,KAAM,EAAnB,GAAuB,EADpC;AAEP,6BAAmBG,MAAM,GAAGA,MAAH,GAAY,EAF9B,CAEkC;;AAFlC;AADU,OAArB;AAMD,KAZqD,CAatD;;;AACA,WAAOJ,OAAO,CAACD,SAAD,CAAd;AACD,GAfgB,CAAjB;AAiBA,QAAMS,UAAU,GAAGnB,OAAO,CAAC,CAAC;AAAEoB,IAAAA;AAAF,GAAD,KAAuB;AAChD,QAAIA,aAAJ,EAAmB;AACjBA,MAAAA,aAAa,CAACC,OAAd,CAAuBC,CAAD,IAAO;AAC3B,YACE,CAAC,CAACA,CAAC,CAACC,UAAJ,IACA,CAAC,CAACD,CAAC,CAACC,UAAF,CAAaC,IADf,IAEAF,CAAC,CAACC,UAAF,CAAaC,IAAb,KAAsB,iBAHxB,EAIE;AACAX,UAAAA,YAAY,CAACY,UAAb,CAAwB,OAAxB,EADA,CACkC;;AAClCC,UAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB;AACD;AACF,OATD;AAUD;AACF,GAbyB,CAA1B;AAeA,QAAMC,KAAK,GAAG,IAAIlC,aAAJ,EAAd;AACA,QAAMmC,MAAM,GAAG,IAAIpC,YAAJ,CAAiB;AAC9BqC,IAAAA,IAAI,EAAEZ,UAAU,CAACa,MAAX,CAAkBvB,QAAlB,EAA4BuB,MAA5B,CAAmC5B,QAAnC,CADwB;AACsB;AACpDyB,IAAAA;AAF8B,GAAjB,CAAf,CAtCsC,CA2CtC;AACA;AACA;AACA;AACA;AAEA;AAEA;;AACA,QAAMI,KAAK,GAAGlC,GAAI;AACpB;AACA;AACA;AACA;AACA;AACA,GANE,CApDsC,CA4DtC;;AACA,QAAMmC,IAAI,GAAGJ,MAAM,CAACK,SAAP,CAAiB;AAAEF,IAAAA;AAAF,GAAjB,CAAb,CA7DsC,CA+DtC;;AACA,QAAMG,SAAS,GAAG;AAChBC,IAAAA,KAAK,EAAE,KADS;AAEhBC,IAAAA,UAAU,EAAE;AAFI,GAAlB,CAhEsC,CAqEtC;;AACAR,EAAAA,MAAM,CAACS,UAAP,CAAkB;AAChBN,IAAAA,KADgB;AAEhBC,IAAAA,IAAI,EAAE;AACJM,MAAAA,KAAK,EAAEJ;AADH;AAFU,GAAlB;AAOA,sBAAO,QAAC,cAAD;AAAgB,IAAA,MAAM,EAAEN,MAAxB;AAAA,cAAiC3B;AAAjC;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CA9ED;;KAAMD,a;AAgFN,eAAeA,aAAf","sourcesContent":["import {\r\n  ApolloClient,\r\n  InMemoryCache,\r\n  ApolloProvider,\r\n  HttpLink,\r\n  ApolloLink,\r\n  gql,\r\n} from '@apollo/client';\r\nimport { onError } from '@apollo/client/link/error';\r\nimport { themeQuery } from '../schemas/theme';\r\n\r\nconst ApolloWrapper = ({ children }) => {\r\n  const httpLink = new HttpLink({\r\n    uri: process.env.REACT_APP_GRAPHQL_SERVICE,\r\n  });\r\n\r\n  const authLink = new ApolloLink((operation, forward) => {\r\n    // Retrive and set the token from localstorage\r\n    const token = localStorage.getItem('token');\r\n    const xtoken = localStorage.getItem('xtoken');\r\n\r\n    if (!!token) {\r\n      operation.setContext({\r\n        headers: {\r\n          authorization: token ? `Bearer ${token}` : '',\r\n          'x-session-token': xtoken ? xtoken : '', //Used in the signup\r\n        },\r\n      });\r\n    }\r\n    // Call the next link in the middleware chain.\r\n    return forward(operation);\r\n  });\r\n\r\n  const logoutLink = onError(({ graphQLErrors }) => {\r\n    if (graphQLErrors) {\r\n      graphQLErrors.forEach((e) => {\r\n        if (\r\n          !!e.extensions &&\r\n          !!e.extensions.code &&\r\n          e.extensions.code === 'UNAUTHENTICATED'\r\n        ) {\r\n          localStorage.removeItem('token'); //TODO handle this, cause if this occurs it will make the client spin for ever\r\n          window.location.reload();\r\n        }\r\n      });\r\n    }\r\n  });\r\n\r\n  const cache = new InMemoryCache();\r\n  const client = new ApolloClient({\r\n    link: logoutLink.concat(authLink).concat(httpLink), // Chain it with the HttpLink\r\n    cache,\r\n  });\r\n\r\n  // const initialState = {\r\n  //   theme: {\r\n  //     light: false,\r\n  //   },\r\n  // };\r\n\r\n  // cache.writeData({ data: initialState });\r\n\r\n  // Query that fetches all existing to-do items\r\n  const query = gql`\r\n    query Theme {\r\n      theme {\r\n        light\r\n      }\r\n    }\r\n  `;\r\n\r\n  // Get the current to-do list\r\n  const data = client.readQuery({ query });\r\n\r\n  // Create a new to-do item\r\n  const initTheme = {\r\n    light: false,\r\n    __typename: 'Theme',\r\n  };\r\n\r\n  // Write back to the to-do list, appending the new item\r\n  client.writeQuery({\r\n    query,\r\n    data: {\r\n      theme: initTheme,\r\n    },\r\n  });\r\n\r\n  return <ApolloProvider client={client}>{children}</ApolloProvider>;\r\n};\r\n\r\nexport default ApolloWrapper;\r\n"]},"metadata":{},"sourceType":"module"}