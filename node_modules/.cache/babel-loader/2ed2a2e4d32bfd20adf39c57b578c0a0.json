{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\dev\\\\pinpoint\\\\admin\\\\src\\\\components\\\\ThemesProvider.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, createContext } from 'react';\nimport { ThemeProvider } from 'styled-components';\nimport { createGlobalStyle } from 'styled-components';\nimport { BodyBackground } from '../stylings/colors';\nconst DEFAULT_STATE = {\n  lightTheme: false,\n  toggleTheme: () => {}\n};\nconst GlobalStyle = createGlobalStyle`\n  html,body {\n      scroll-behavior: smooth;\n      background: ${BodyBackground};\n  }\n\n  input {\n    filter: none;\n  }\n  \n  input:-webkit-autofill,\n  input:-webkit-autofill:hover,\n  input:-webkit-autofill:focus,\n  input:-webkit-autofill:active {\n    transition: background-color 5000s ease-in-out 0s;\n  }\n  :-moz-autofill-preview {\n    filter: grayscale(21%) brightness(88%) contrast(161%) invert(10%) sepia(40%) saturate(206%);\n  }\n`;\n_c = GlobalStyle;\nexport const ThemesContext = /*#__PURE__*/createContext(DEFAULT_STATE); // const GET_THEME = gql`\n//   {\n//     theme @client {\n//       light\n//     }\n//   }\n// `;\n// const GET_COUNTER = gql`\n//   query GetTheme {\n//     theme @client\n//   }\n// `;\n//TODO store settings\n\n_c2 = ThemesContext;\nexport const ThemesProvider = props => {\n  _s();\n\n  const [lightTheme, setLightTheme] = useState(false); // const client = useApolloClient();\n  // const data = client.readQuery({ GET_THEME });\n  // console.log(data);\n  // const {\n  //   data: { theme },\n  // } = useQuery(GET_COUNTER);\n  // console.log(theme);\n  // TODO remove these\n\n  const theme = {\n    light: false\n  };\n\n  const toggleTheme = () => {\n    setLightTheme(!lightTheme);\n  };\n\n  return /*#__PURE__*/_jsxDEV(ThemesContext.Provider, {\n    value: {\n      lightTheme,\n      toggleTheme: toggleTheme\n    },\n    children: /*#__PURE__*/_jsxDEV(ThemeProvider, {\n      theme: {\n        mode: !!theme.light ? 'light' : 'dark'\n      },\n      children: /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [props.children, /*#__PURE__*/_jsxDEV(GlobalStyle, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ThemesProvider, \"s3WfsFBuZlF1Nyh5ZNz2kxQ39R8=\");\n\n_c3 = ThemesProvider;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"GlobalStyle\");\n$RefreshReg$(_c2, \"ThemesContext\");\n$RefreshReg$(_c3, \"ThemesProvider\");","map":{"version":3,"sources":["C:/dev/pinpoint/admin/src/components/ThemesProvider.js"],"names":["React","useState","createContext","ThemeProvider","createGlobalStyle","BodyBackground","DEFAULT_STATE","lightTheme","toggleTheme","GlobalStyle","ThemesContext","ThemesProvider","props","setLightTheme","theme","light","mode","children"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,aAA1B,QAA+C,OAA/C;AACA,SAASC,aAAT,QAA8B,mBAA9B;AACA,SAASC,iBAAT,QAAkC,mBAAlC;AACA,SAASC,cAAT,QAA+B,oBAA/B;AAEA,MAAMC,aAAa,GAAG;AACpBC,EAAAA,UAAU,EAAE,KADQ;AAEpBC,EAAAA,WAAW,EAAE,MAAM,CAAE;AAFD,CAAtB;AAKA,MAAMC,WAAW,GAAGL,iBAAkB;AACtC;AACA;AACA,oBAAoBC,cAAe;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAnBA;KAAMI,W;AAqBN,OAAO,MAAMC,aAAa,gBAAGR,aAAa,CAACI,aAAD,CAAnC,C,CAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MAdaI,a;AAeb,OAAO,MAAMC,cAAc,GAAIC,KAAD,IAAW;AAAA;;AACvC,QAAM,CAACL,UAAD,EAAaM,aAAb,IAA8BZ,QAAQ,CAAC,KAAD,CAA5C,CADuC,CAEvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAMa,KAAK,GAAG;AAAEC,IAAAA,KAAK,EAAE;AAAT,GAAd;;AAEA,QAAMP,WAAW,GAAG,MAAM;AACxBK,IAAAA,aAAa,CAAC,CAACN,UAAF,CAAb;AACD,GAFD;;AAIA,sBACE,QAAC,aAAD,CAAe,QAAf;AACE,IAAA,KAAK,EAAE;AACLA,MAAAA,UADK;AAELC,MAAAA,WAAW,EAAEA;AAFR,KADT;AAAA,2BAME,QAAC,aAAD;AAAe,MAAA,KAAK,EAAE;AAAEQ,QAAAA,IAAI,EAAE,CAAC,CAACF,KAAK,CAACC,KAAR,GAAgB,OAAhB,GAA0B;AAAlC,OAAtB;AAAA,6BACE;AAAA,mBACGH,KAAK,CAACK,QADT,eAEE,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AANF;AAAA;AAAA;AAAA;AAAA,UADF;AAeD,CAhCM;;GAAMN,c;;MAAAA,c","sourcesContent":["import React, { useState, createContext } from 'react';\r\nimport { ThemeProvider } from 'styled-components';\r\nimport { createGlobalStyle } from 'styled-components';\r\nimport { BodyBackground } from '../stylings/colors';\r\n\r\nconst DEFAULT_STATE = {\r\n  lightTheme: false,\r\n  toggleTheme: () => {},\r\n};\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  html,body {\r\n      scroll-behavior: smooth;\r\n      background: ${BodyBackground};\r\n  }\r\n\r\n  input {\r\n    filter: none;\r\n  }\r\n  \r\n  input:-webkit-autofill,\r\n  input:-webkit-autofill:hover,\r\n  input:-webkit-autofill:focus,\r\n  input:-webkit-autofill:active {\r\n    transition: background-color 5000s ease-in-out 0s;\r\n  }\r\n  :-moz-autofill-preview {\r\n    filter: grayscale(21%) brightness(88%) contrast(161%) invert(10%) sepia(40%) saturate(206%);\r\n  }\r\n`;\r\n\r\nexport const ThemesContext = createContext(DEFAULT_STATE);\r\n\r\n// const GET_THEME = gql`\r\n//   {\r\n//     theme @client {\r\n//       light\r\n//     }\r\n//   }\r\n// `;\r\n// const GET_COUNTER = gql`\r\n//   query GetTheme {\r\n//     theme @client\r\n//   }\r\n// `;\r\n//TODO store settings\r\nexport const ThemesProvider = (props) => {\r\n  const [lightTheme, setLightTheme] = useState(false);\r\n  // const client = useApolloClient();\r\n  // const data = client.readQuery({ GET_THEME });\r\n  // console.log(data);\r\n  // const {\r\n  //   data: { theme },\r\n  // } = useQuery(GET_COUNTER);\r\n  // console.log(theme);\r\n  // TODO remove these\r\n\r\n  const theme = { light: false };\r\n\r\n  const toggleTheme = () => {\r\n    setLightTheme(!lightTheme);\r\n  };\r\n\r\n  return (\r\n    <ThemesContext.Provider\r\n      value={{\r\n        lightTheme,\r\n        toggleTheme: toggleTheme,\r\n      }}\r\n    >\r\n      <ThemeProvider theme={{ mode: !!theme.light ? 'light' : 'dark' }}>\r\n        <>\r\n          {props.children}\r\n          <GlobalStyle />\r\n        </>\r\n      </ThemeProvider>\r\n    </ThemesContext.Provider>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}